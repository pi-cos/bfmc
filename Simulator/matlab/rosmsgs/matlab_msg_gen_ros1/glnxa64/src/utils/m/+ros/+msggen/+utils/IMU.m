
classdef IMU < ros.Message
    %IMU MATLAB implementation of utils/IMU
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'utils/IMU' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '99077fbdb8e401c664e302a16d80e2cc' % The MD5 Checksum of the message definition
        PropertyList = { 'Roll' 'Pitch' 'Yaw' 'Accelx' 'Accely' 'Accelz' 'Posx' 'Posy' 'Timestamp' } % List of non-constant message properties
        ROSPropertyList = { 'roll' 'pitch' 'yaw' 'accelx' 'accely' 'accelz' 'posx' 'posy' 'timestamp' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Roll
        Pitch
        Yaw
        Accelx
        Accely
        Accelz
        Posx
        Posy
        Timestamp
    end
    methods
        function set.Roll(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Roll');
            obj.Roll = single(val);
        end
        function set.Pitch(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Pitch');
            obj.Pitch = single(val);
        end
        function set.Yaw(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Yaw');
            obj.Yaw = single(val);
        end
        function set.Accelx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Accelx');
            obj.Accelx = single(val);
        end
        function set.Accely(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Accely');
            obj.Accely = single(val);
        end
        function set.Accelz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Accelz');
            obj.Accelz = single(val);
        end
        function set.Posx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Posx');
            obj.Posx = single(val);
        end
        function set.Posy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Posy');
            obj.Posy = single(val);
        end
        function set.Timestamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMU', 'Timestamp');
            obj.Timestamp = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.utils.IMU.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.utils.IMU(strObj);
        end
    end
end
