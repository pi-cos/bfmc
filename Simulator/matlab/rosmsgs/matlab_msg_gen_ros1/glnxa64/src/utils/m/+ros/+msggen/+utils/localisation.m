
classdef localisation < ros.Message
    %localisation MATLAB implementation of utils/localisation
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'utils/localisation' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '32d060122e3076e51189db3d2135636c' % The MD5 Checksum of the message definition
        PropertyList = { 'Timestamp' 'PosA' 'PosB' 'RotA' 'RotB' } % List of non-constant message properties
        ROSPropertyList = { 'timestamp' 'posA' 'posB' 'rotA' 'rotB' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Timestamp
        PosA
        PosB
        RotA
        RotB
    end
    methods
        function set.Timestamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'localisation', 'Timestamp');
            obj.Timestamp = double(val);
        end
        function set.PosA(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'localisation', 'PosA');
            obj.PosA = single(val);
        end
        function set.PosB(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'localisation', 'PosB');
            obj.PosB = single(val);
        end
        function set.RotA(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'localisation', 'RotA');
            obj.RotA = single(val);
        end
        function set.RotB(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'localisation', 'RotB');
            obj.RotB = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.utils.localisation.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.utils.localisation(strObj);
        end
    end
end
