# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from utils/IMU.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IMU(genpy.Message):
  _md5sum = "99077fbdb8e401c664e302a16d80e2cc"
  _type = "utils/IMU"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 roll
float32 pitch
float32 yaw
float32 accelx
float32 accely
float32 accelz
float32 posx
float32 posy
float64 timestamp
"""
  __slots__ = ['roll','pitch','yaw','accelx','accely','accelz','posx','posy','timestamp']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       roll,pitch,yaw,accelx,accely,accelz,posx,posy,timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMU, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.accelx is None:
        self.accelx = 0.
      if self.accely is None:
        self.accely = 0.
      if self.accelz is None:
        self.accelz = 0.
      if self.posx is None:
        self.posx = 0.
      if self.posy is None:
        self.posy = 0.
      if self.timestamp is None:
        self.timestamp = 0.
    else:
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.accelx = 0.
      self.accely = 0.
      self.accelz = 0.
      self.posx = 0.
      self.posy = 0.
      self.timestamp = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8fd().pack(_x.roll, _x.pitch, _x.yaw, _x.accelx, _x.accely, _x.accelz, _x.posx, _x.posy, _x.timestamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.roll, _x.pitch, _x.yaw, _x.accelx, _x.accely, _x.accelz, _x.posx, _x.posy, _x.timestamp,) = _get_struct_8fd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8fd().pack(_x.roll, _x.pitch, _x.yaw, _x.accelx, _x.accely, _x.accelz, _x.posx, _x.posy, _x.timestamp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.roll, _x.pitch, _x.yaw, _x.accelx, _x.accely, _x.accelz, _x.posx, _x.posy, _x.timestamp,) = _get_struct_8fd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8fd = None
def _get_struct_8fd():
    global _struct_8fd
    if _struct_8fd is None:
        _struct_8fd = struct.Struct("<8fd")
    return _struct_8fd
